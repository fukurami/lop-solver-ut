
<textarea id="input"></textarea>
<button id="btn">btn</button>
<button id="btn2">btn2</button>
<button id="btn3">btn3</button>
<button id="btn4">btn4</button>
<div id="output"></div>


<script src="util.js"></script>
<script src="lopsolver2Z.js"></script>
<script src="linedata2Z.js"></script>
<script src="rosen_honban_data_kai2Za.js"></script>
<script>
"use strict"

function toStk(datastring, points, edges){
	let data = datastring.replace(/[\r\n\t・ｽ@]/g,"").split(" - ");
	let cpid = findPoint(data[0],points);
	let stk= stack_addPoint("",cpid);
	for(let i=1; i< data.length; i=i+2){
		let npid = findPoint(data[i+1],points);
		if(npid==-1){
			throw new Error("point "+data[i+1]+" not found.");
			return;
		}
		let nename = data[i].match(/\[(.+)\]/)[1];
		let cpe2 = points[cpid].edges2;
		let neid;
		for(let j=0; j< cpe2.length; j++){
			if(cpe2[j].to==npid){
				neid = cpe2[j].id;
				break;
			}
		}
		if(neid==undefined){
			throw new Error("point "+data[i-1]+" not connected to point "+data[i+1]+".");
			return;
		}
		if(edges[neid].name!=nename){
			throw new Error("edge "+nename+" from "+ data[i-1] +" to "+ data[i+1] +" not found.");
			return;
		}
		stk = stack_addPointAndEdge(stk,neid,npid);
		cpid = npid;
	}
	return stk;
}

function getValueFromStack(stk,edges){
	let val = 0;
	stk.replace(/e(\d+)/g, function(match,p1){
		val += edges[p1|0].value;
	});
	return val;
}

function stack_toString_withValue(stack, points, edges){
	let arr = [];
	let val = 0;
	stack.replace(/([pe])(\d+)/g, function(match,p1,p2){
		p2=parseInt(p2);
		let str="";
		if(p1=="e"){
			val += edges[p2].value;
			str = "["+edges[p2].name+"]";
		}
		else if(p1=="p"){
			str = points[p2].name+"&lt;"+(Math.round(val*10)/10)+"km&gt;";
		}
		arr.push(str);
	});
	return arr.join(" - ");
}

var qq = (q,e)=>(e||document).querySelector(q);
var $ev = (q,n,f,e)=>qq(q,e).addEventListener(n,f);
var {points, edges} = createPointAndEdgeData(the_lines_data);

$ev("#btn","click",e=>{
	var stack = document.querySelector("#input").value;
	var result = (new Stack(stack)).toString(points,edges);
	document.querySelector("#output").innerHTML = result;
});
$ev("#btn2","click",e=>{
	var datastr = qq("#input").value;
	var stk = toStk(datastr, points, edges);
	var val = getValueFromStack(stk, edges);
	qq("#output").innerHTML = val + "<br>"+stk;
});
$ev("#btn3","click",e=>{
	var stk = qq("#input").value;
	var val = getValueFromStack(stk, edges);
	qq("#output").innerHTML = val;
});
$ev("#btn4","click",e=>{
	var stk = qq("#input").value;
	var result = stack_toString_withValue(stk,points,edges);
	qq("#output").innerHTML = result;
});

</script>
